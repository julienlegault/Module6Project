# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'LeagueManager.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QInputDialog

from league.league import League
from league_database.league_database import LeagueDatabase


class Ui_LeagueManager(object):

    _theDatabase = None
    _lastDBName = None

    def setupUi(self, LeagueManager):
        self._theDatabase = LeagueDatabase()
        if self._lastDBName:
            self.SaveLeagues()
            self.lineEdit.setText(self._lastDBName)
            self.loadLeague()
        LeagueManager.setObjectName("LeagueManager")
        LeagueManager.resize(1068, 657)
        self.centralwidget = QtWidgets.QWidget(LeagueManager)
        self.centralwidget.setObjectName("centralwidget")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(50, 90, 951, 531))
        self.tableWidget.setMinimumSize(QtCore.QSize(951, 0))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(4)
        if self.tableWidget.rowCount():
            for i in range(0, self.tableWidget.rowCount()-1):
                self.tableWidget.removeRow(i)
        self.tableWidget.setEditTriggers(self.tableWidget.NoEditTriggers)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        self.tableWidget.horizontalHeader().setCascadingSectionResizes(False)
        self.tableWidget.horizontalHeader().setMinimumSectionSize(200)
        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        self.CurrentLeaguesLabel = QtWidgets.QLabel(self.centralwidget)
        self.CurrentLeaguesLabel.setGeometry(QtCore.QRect(60, 0, 951, 41))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.CurrentLeaguesLabel.setFont(font)
        self.CurrentLeaguesLabel.setStyleSheet("")
        self.CurrentLeaguesLabel.setScaledContents(True)
        self.CurrentLeaguesLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.CurrentLeaguesLabel.setObjectName("CurrentLeaguesLabel")
        self.SaveButton = QtWidgets.QPushButton(self.centralwidget)
        self.SaveButton.setGeometry(QtCore.QRect(900, 50, 90, 28))
        self.SaveButton.setAutoFillBackground(False)
        self.SaveButton.setStyleSheet("background-color:rgb(66, 255, 33);")
        self.SaveButton.setObjectName("SaveButton")
        self.LoadButton = QtWidgets.QPushButton(self.centralwidget)
        self.LoadButton.setGeometry(QtCore.QRect(620, 50, 111, 28))
        self.LoadButton.setStyleSheet("background-color:rgb(201, 5, 255);")
        self.LoadButton.setObjectName("LoadButton")
        self.AddButton = QtWidgets.QPushButton(self.centralwidget)
        self.AddButton.setGeometry(QtCore.QRect(740, 50, 151, 28))
        self.AddButton.setStyleSheet("background-color:rgb(41, 109, 255);")
        self.AddButton.setObjectName("AddButton")
        self.BackButton = QtWidgets.QPushButton(self.centralwidget)
        self.BackButton.setGeometry(QtCore.QRect(50, 50, 90, 28))
        self.BackButton.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.BackButton.setObjectName("BackButton")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(382, 50, 221, 28))
        self.lineEdit.setObjectName("lineEdit")
        LeagueManager.setCentralWidget(self.centralwidget)
        self.statusBar = QtWidgets.QStatusBar(LeagueManager)
        self.statusBar.setObjectName("statusBar")
        LeagueManager.setStatusBar(self.statusBar)

        self.retranslateUi(LeagueManager)
        QtCore.QMetaObject.connectSlotsByName(LeagueManager)

    def retranslateUi(self, LeagueManager):
        _translate = QtCore.QCoreApplication.translate
        LeagueManager.setWindowTitle(_translate("LeagueManager", "League Manager"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("LeagueManager", "League Name"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("LeagueManager", "Teams"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("LeagueManager", "Edit"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("LeagueManager", "Delete"))
        self.CurrentLeaguesLabel.setText(_translate("LeagueManager", "Current Leagues"))
        self.SaveButton.setText(_translate("LeagueManager", "Save"))
        self.LoadButton.setText(_translate("LeagueManager", "Load Database"))
        self.AddButton.setText(_translate("LeagueManager", "Add New League"))
        self.BackButton.setText(_translate("LeagueManager", "Back"))

    def loadLeague(self):
        theFile = self.lineEdit.text()
        self._theDatabase.load(theFile)
        for i in range(0, self.tableWidget.rowCount() - 1):
            self.tableWidget.removeRow(i)
        i = 0
        for league in self._theDatabase.leagues:
            self.tableWidget.insertRow(i)
            self.tableWidget.setItem(i, 0, QtWidgets.QTableWidgetItem(league.name))
            tempList = []
            for team in league.teams:
                tempList.append(team.name)
            self.tableWidget.setItem(i, 1, QtWidgets.QTableWidgetItem(', '.join(tempList)))
            tempEditButton = QtWidgets.QPushButton(self.tableWidget)
            tempEditButton.setText("Edit")
            tempEditButton.clicked.connect(lambda: self.showLeagueView(league))
            self.tableWidget.setCellWidget(i, 2, tempEditButton)
            tempDeleteButton = QtWidgets.QPushButton(self.tableWidget)
            tempDeleteButton.setText("Delete")
            tempDeleteButton.clicked.connect(lambda: self.deleteLeague(league))
            self.tableWidget.setCellWidget(i, 3, tempDeleteButton)
            i += 1

    def loadTeam(self, inLeague):
        for i in range(0, self.tableWidget.rowCount() - 1):
            self.tableWidget.removeRow(i)
        i = 0
        for team in inLeague.teams:
            self.tableWidget.insertRow(i)
            self.tableWidget.setItem(i, 0, QtWidgets.QTableWidgetItem(team.name))
            tempList = []
            for member in team.members:
                tempList.append(member.name)
            self.tableWidget.setItem(i, 1, QtWidgets.QTableWidgetItem(', '.join(tempList)))
            tempEditButton = QtWidgets.QPushButton(self.tableWidget)
            tempEditButton.setText("Edit")
            tempEditButton.clicked.connect(lambda: self.showTeamView(team))
            self.tableWidget.setCellWidget(i, 2, tempEditButton)
            tempDeleteButton = QtWidgets.QPushButton(self.tableWidget)
            tempDeleteButton.setText("Delete")
            tempDeleteButton.clicked.connect(lambda: self.deleteTeam(team))
            self.tableWidget.setCellWidget(i, 3, tempDeleteButton)
            i += 1

    def loadMembersCSV(self):
        pass

    def loadMembers(self, inTeam):
        for i in range(0, self.tableWidget.rowCount() - 1):
            self.tableWidget.removeRow(i)
        i = 0
        for member in inTeam.teams:
            self.tableWidget.insertRow(i)
            self.tableWidget.setItem(i, 0, QtWidgets.QTableWidgetItem(member.name))
            self.tableWidget.setItem(i, 1, QtWidgets.QTableWidgetItem(member.email))
            tempEditButton = QtWidgets.QPushButton(self.tableWidget)
            tempEditButton.setText("Edit")
            tempEditButton.clicked.connect(lambda: self.showMemberView(member))
            self.tableWidget.setCellWidget(i, 2, tempEditButton)
            tempDeleteButton = QtWidgets.QPushButton(self.tableWidget)
            tempDeleteButton.setText("Delete")
            tempDeleteButton.clicked.connect(lambda: self.deleteMember(member))
            self.tableWidget.setCellWidget(i, 3, tempDeleteButton)
            i += 1

    def AddLeagueModal(self):
        text, ok = QInputDialog.getText(self.centralwidget, 'Add League', 'League Name:')
        if ok:
            tempLeague = League(id(text), text)
            self._theDatabase.add_league(tempLeague)
            tempIndex = self.tableWidget.rowCount()
            self.tableWidget.insertRow(tempIndex)
            self.tableWidget.setItem(tempIndex, 0, QtWidgets.QTableWidgetItem(text))
            self.tableWidget.setItem(tempIndex, 1, QtWidgets.QTableWidgetItem("No Teams"))
            tempEditButton = QtWidgets.QPushButton(self.tableWidget)
            tempEditButton.setText("Edit")
            tempEditButton.clicked.connect(lambda: self.showLeagueView(tempLeague))
            self.tableWidget.setCellWidget(tempIndex, 2, tempEditButton)
            tempDeleteButton = QtWidgets.QPushButton(self.tableWidget)
            tempDeleteButton.setText("Delete")
            tempDeleteButton.clicked.connect(lambda: self.deleteLeague(tempLeague))
            self.tableWidget.setCellWidget(tempIndex, 3, tempDeleteButton)

    def SaveLeagues(self):
        if self._lastDBName:
            self._theDatabase.save(self._lastDBName)
        else:
            self._theDatabase.save(self.lineEdit.text())

    def deleteLeague(self, inLeague):
        pass

    def deleteTeam(self, inTeam):
        pass

    def deleteMember(self, inMember):
        pass

    def showLeagueView(self, inLeague):
        print(self.tableWidget.horizontalHeaderItem(1))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText("Team Name")
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText("Members")
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText("Edit")
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText("Delete")
        self.CurrentLeaguesLabel.setText("Current Leagues")
        self.SaveButton.setText("Save")
        self.LoadButton.setText("Load CSV")
        self.AddButton.setText("Add New Team")
        self.BackButton.setText("Back")
        self.loadTeam(inLeague)
        self.LoadButton.clicked.connect(lambda: self.loadMembersCSV())
        self.AddButton.clicked.connect(lambda: self.AddLeagueModal())
        self.SaveButton.clicked.connect(lambda: self.SaveLeagues())
        self.BackButton.clicked.connect(lambda: self.backToLeagus())
        self.BackButton.setVisible(True)

    def showTeamView(self, inTeam):
        pass

    def showMemberView(self, inMember):
        pass
